var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

function onInstall(event) {
  console.log('[Serviceworker]', "Installing!", event);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
       /* See this pretty chart 
      https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Basic_architecture */
      self.skipWaiting()
      return cache.addAll([
        // make sure serviceworker.js is not required by application.js
        // if you want to reference application.js from here
        '<%#= asset_path "application.js" %>',

        '<%= asset_path "application.css" %>',

        '/offline.html',

      ]);
    })
  );
}

function onActivate(event) {
  console.log("different");
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
  event.waitUntil(self.clients.claim());
}

// Borrowed from https://github.com/TalAter/UpUp
function onFetch(event) {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request.clone()).catch(function() {
      // if it fails, try to return request from the cache
      console.log('stepping in');
      console.log(event.request);
      return caches.match(event.request).then(function(response) {
        if (response) {
          console.log('the caching request worked!');
          return response;
        }

        if (writeRequest(event.request) && safeToDelay(event.request)) {
          delayRequest(event.request);
          return caches.match(delayResponseFor(event.request));
        }

        // if not found in cache, return default offline content for navigate requests
        console.log('try to return the default offline content');
        if (event.request.mode === 'navigate' ||
          (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
          console.log('[Serviceworker]', "Fetching offline content", event);
          return caches.match('/offline.html');
        }
      })
    })
  );
}

function onMessage(event) {
  console.log('service worker message', event.data);
  if (event.data.type === 'fetchForms') {
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(function cacheLogForms(cache) {
          return cache.addAll([
            '/restoration_activity_log_entries/new',
          ])
        })
    )
  }
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
self.addEventListener('message', onMessage);

function writeRequest(request) {
  return request.method === 'POST' ||
    request.method === 'PUT' ||
    request.method === 'PATCH' ||
    request.method === 'DELETE';
}

function safeToDelay(request) {
  return request.url.match(/\/restoration_activity_log_entries\/?$/);
}

function delayResponseFor(request) {
  return '/restoration_activity_log_entries/new'
}

function delayRequest(request) {
  console.log('storing the request to be made later');
  initWriteDatabase()
    .then(db => storeRequestAsWrite(db, request))
    .then(msg => console.log('request stored', msg))
    .catch(console.error);
}

function storeRequestAsWrite(db, request) {
  return new Promise((resolve, reject) => {
    var requestKey = (new Date()).toISOString();
    var storableRequest = {
      url: request.url,
    };
    console.log('storable request', storableRequest);
    var dbAdd = db.transaction(["writes"], 'readwrite')
      .objectStore("writes")
      .add({
        key: requestKey,
        request: storableRequest,
        status: 'queued',
      });
    dbAdd.onsuccess = resolve;
    dbAdd.onerror = reject;
  });
}

function initWriteDatabase() {
  return new Promise((resolve, reject) => {
    console.log('db init');
    var request = self.indexedDB.open("writeDatabase", 3);
    request.onsuccess = (event) => {
      console.log('db opened');
      resolve(event.target.result);
    }
    request.onupgradeneeded = function(event) {
      console.log('upgrading db');
      // Save the IDBDatabase interface
      var db = event.target.result;

      // Create an objectStore for this database
      var objectStore = db.createObjectStore("writes", { keyPath: "key" });
    };
  });
}
